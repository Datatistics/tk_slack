# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/API/02_block_builder.ipynb.

# %% auto 0
__all__ = ['BlockBuilder']

# %% ../nbs/API/02_block_builder.ipynb 3
from fastcore.basics import patch_to
from fastcore.test import *
from typing import List, Tuple, Dict, Any, Callable, Optional
import pandas as pd
import json

# %% ../nbs/API/02_block_builder.ipynb 5
class BlockBuilder:
    """
    Utility class for building Slack Block Kit elements.
    Provides methods to create various block types for Slack messages.
    """
    
    pass

# %% ../nbs/API/02_block_builder.ipynb 7
@patch_to(BlockBuilder,cls_method=True)
def create_header_block(self, text: str) -> Dict[str, Any]:
        """Create a header block for Slack messages.
        
        Args:
            text: The text to display in the header
            
        Returns:
            Slack block kit header object
        """
        return {
            "type": "header",
            "text": {
                "type": "plain_text",
                "text": text,
                "emoji": True
            }
        }

# %% ../nbs/API/02_block_builder.ipynb 11
@patch_to(BlockBuilder,cls_method=True)
def create_section_block(self, text: str, fields: Optional[List[Dict[str, Any]]] = None) -> Dict[str, Any]:
    """Create a section block for Slack messages.
    
    Args:
        text: The text to display in the section
        fields: Optional list of field objects for the section
        
    Returns:
        Slack block kit section object
    """
    section = {
        "type": "section",
        "text": {
            "type": "mrkdwn",
            "text": text
        }
    }
    
    if fields:
        section["fields"] = fields
        
    return section

# %% ../nbs/API/02_block_builder.ipynb 16
@patch_to(BlockBuilder,cls_method=True)
def create_field(self, title: str, value: str) -> Dict[str, Any]:
        """Create a field for a section block.
        
        Args:
            title: The title of the field (will be bolded)
            value: The value of the field
            
        Returns:
            Field object for use in section blocks
        """
        return {
            "type": "mrkdwn",
            "text": f"*{title}*\n{value}"
        }

# %% ../nbs/API/02_block_builder.ipynb 20
@patch_to(BlockBuilder,cls_method=True)
def create_fields_section(self, fields_data: List[Tuple[str, str]], max_fields_per_section: int = 10) -> List[Dict[str, Any]]:
        """Create one or more section blocks with fields.
        
        Args:
            fields_data: List of (label, value) tuples
            max_fields_per_section: Maximum fields per section (Slack limit is 10)
            
        Returns:
            List of section blocks
        """
        if not fields_data: return []
            
        # Create field objects
        fields = [
            BlockBuilder.create_field(label, value) 
            for label, value in fields_data 
            if value  # Only include non-empty values
        ]
        
        if not fields: return []
            
        # Split into multiple sections if needed
        sections = []
        for i in range(0, len(fields), max_fields_per_section):
            section_fields = fields[i:i + max_fields_per_section]
            sections.append({
                "type": "section",
                "fields": section_fields
            })
            
        return sections

# %% ../nbs/API/02_block_builder.ipynb 25
@patch_to(BlockBuilder,cls_method=True)
def create_context_block(self, text: str) -> Dict[str, Any]:
        """Create a context block for Slack messages.
        
        Args:
            text: The text to show in the context block
            
        Returns:
            Slack block kit context object
        """
        return {
            "type": "context",
            "elements": [
                {
                    "type": "mrkdwn",
                    "text": text
                }
            ]
        }

# %% ../nbs/API/02_block_builder.ipynb 28
@patch_to(BlockBuilder,cls_method=True)
def create_divider(self) -> Dict[str, str]:
        """Create a divider block for Slack messages.
        
        Returns:
            Slack block kit divider object
        """
        return {"type": "divider"}

# %% ../nbs/API/02_block_builder.ipynb 31
@patch_to(BlockBuilder,cls_method=True)
def create_metadata_context(self, metadata_items: List[Tuple[str, str|List|dict]]) -> Dict[str, Any]:
        """Create a context block for metadata items.
        
        Args:
            metadata_items: List of (label, value) tuples
            
        Returns:
            Formatted metadata field
        """
        meta_parts = {}
        for label, value in metadata_items:
            if value: meta_parts[label]=value
                
        if not meta_parts: return None
            
        return {'metadata':meta_parts}
