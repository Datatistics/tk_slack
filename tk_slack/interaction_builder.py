# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/API/03_interection_builder.ipynb.

# %% auto 0
__all__ = ['InteractionBuilder']

# %% ../nbs/API/03_interection_builder.ipynb 3
from fastcore.basics import patch_to
from fastcore.test import *
from typing import List, Tuple, Dict, Any, Callable, Optional
from .core import ValueFormatter
import pandas as pd
import json

# %% ../nbs/API/03_interection_builder.ipynb 5
class InteractionBuilder:
    """
    Utility class for creating interactive Slack Block Kit elements.
    """
    
    pass

# %% ../nbs/API/03_interection_builder.ipynb 7
@patch_to(InteractionBuilder,cls_method=True)
def create_button(self, text: str, action_id: str, url: Optional[str] = None, 
                    value: Optional[str] = None, style: Optional[str] = None) -> Dict[str, Any]:
    """Create a button element for Slack messages.
    
    Args:
        text: Button text
        action_id: Identifier for the button
        url: Optional URL for link buttons
        value: Optional value for the button
        style: Optional style - "primary" or "danger"
        
    Returns:
        Slack block kit button object
    """
    button = {
        "type": "button",
        "text": {
            "type": "plain_text",
            "text": text,
            "emoji": True
        },
        "action_id": action_id
    }
    
    if url:
        button["url"] = url
        
    if value:
        button["value"] = value
        
    if style and style in ["primary", "danger"]:
        button["style"] = style
        
    return button

# %% ../nbs/API/03_interection_builder.ipynb 10
@patch_to(InteractionBuilder,cls_method=True)
def create_actions_block(self, elements: List[Dict[str, Any]]) -> Dict[str, Any]:
    """Create an actions block for Slack messages.
    
    Args:
        elements: List of interactive elements
        
    Returns:
        Slack block kit actions object
    """
    return {"type": "actions","elements": elements}

# %% ../nbs/API/03_interection_builder.ipynb 12
@patch_to(InteractionBuilder,cls_method=True)
def create_datepicker(self, action_id: str, placeholder: str, 
                         initial_date: Optional[str] = None) -> Dict[str, Any]:
        """Create a date picker element.
        
        Args:
            action_id: Identifier for the date picker
            placeholder: Placeholder text
            initial_date: Optional initial date (YYYY-MM-DD format)
            
        Returns:
            Slack block kit datepicker object
        """
        datepicker = {
            "type": "datepicker",
            "action_id": action_id,
            "placeholder": {
                "type": "plain_text",
                "text": placeholder,
                "emoji": True
            }
        }
        
        if initial_date:
            datepicker["initial_date"] = initial_date
            
        return datepicker

# %% ../nbs/API/03_interection_builder.ipynb 14
@patch_to(InteractionBuilder,cls_method=True)
def create_static_select(self, action_id: str, placeholder: str, 
                        options: List[Tuple[str, str]]) -> Dict[str, Any]:
    """Create a dropdown select element.
    
    Args:
        action_id: Identifier for the select
        placeholder: Placeholder text
        options: List of (text, value) tuples for options
        
    Returns:
        Slack block kit static_select object
    """
    select = {
        "type": "static_select",
        "action_id": action_id,
        "placeholder": {
            "type": "plain_text",
            "text": placeholder,
            "emoji": True
        },
        "options": [
            {
                "text": {
                    "type": "plain_text",
                    "text": text,
                    "emoji": True
                },
                "value": value
            }
            for text, value in options
        ]
    }
    
    return select

# %% ../nbs/API/03_interection_builder.ipynb 16
@patch_to(InteractionBuilder,cls_method=True)
def create_multi_select(self, action_id: str, placeholder: str, 
                        options: List[Tuple[str, str]]) -> Dict[str, Any]:
    """Create a multi-select dropdown element.
    
    Args:
        action_id: Identifier for the multi-select
        placeholder: Placeholder text
        options: List of (text, value) tuples for options
        
    Returns:
        Slack block kit multi_static_select object
    """
    multi_select = {
        "type": "multi_static_select",
        "action_id": action_id,
        "placeholder": {
            "type": "plain_text",
            "text": placeholder,
            "emoji": True
        },
        "options": [
            {
                "text": {
                    "type": "plain_text",
                    "text": text,
                    "emoji": True
                },
                "value": value
            }
            for text, value in options
        ]
    }
    
    return multi_select

# %% ../nbs/API/03_interection_builder.ipynb 18
@patch_to(InteractionBuilder,cls_method=True)
def create_users_select(self, action_id: str, placeholder: str) -> Dict[str, Any]:
        """Create a user select element.
        
        Args:
            action_id: Identifier for the users select
            placeholder: Placeholder text
            
        Returns:
            Slack block kit users_select object
        """
        return {
            "type": "users_select",
            "action_id": action_id,
            "placeholder": {
                "type": "plain_text",
                "text": placeholder,
                "emoji": True
            }
        }

# %% ../nbs/API/03_interection_builder.ipynb 20
@patch_to(InteractionBuilder,cls_method=True)
def create_channels_select(self, action_id: str, placeholder: str) -> Dict[str, Any]:
    """Create a channel select element.
    
    Args:
        action_id: Identifier for the channels select
        placeholder: Placeholder text
        
    Returns:
        Slack block kit channels_select object
    """
    return {
        "type": "channels_select",
        "action_id": action_id,
        "placeholder": {
            "type": "plain_text",
            "text": placeholder,
            "emoji": True
        }
    }

# %% ../nbs/API/03_interection_builder.ipynb 22
@patch_to(InteractionBuilder,cls_method=True)
def detect_and_create_interactive_elements(
        self,
        option_names: List[str], 
        option_values: List[str], 
        action_id_base: str, 
        action_type: Optional[str] = None
    ) -> List[Dict[str, Any]]:
    """Smartly detect and create appropriate interactive elements.
    
    Args:
        option_names: List of option names
        option_values: List of option values
        action_id_base: Base for generating action IDs
        action_type: Optional explicit action type
        
    Returns:
        List of interactive elements
    """
    # Smart action type detection if not explicitly set
    if not action_type:
        # Check for date-related names to use date picker
        date_keywords = ['date', 'when', 'calendar', 'schedule', 'deadline', 'due']
        has_date_keyword = any(keyword in ' '.join(option_names).lower() for keyword in date_keywords)
        
        # Check if we have multiple options for a select
        if len(option_names) > 3:
            action_type = 'static_select'
        elif has_date_keyword:
            action_type = 'datepicker'
        elif any('user' in name.lower() for name in option_names):
            action_type = 'users_select'
        elif any('channel' in name.lower() for name in option_names):
            action_type = 'channels_select'
        elif any(['multi' in ''.join(option_names).lower(), 
                    'select multiple' in ''.join(option_names).lower()]):
            action_type = 'multi_static_select'
        else:
            action_type = 'button'
    
    elements = []
    
    # Create appropriate interactive elements based on action_type
    if action_type == 'datepicker':
        # Create date picker
        initial_date = None
        if option_values and option_values[0]:
            try:
                # Try to parse as date if it looks like one
                parsed_date = pd.to_datetime(option_values[0])
                initial_date = parsed_date.strftime('%Y-%m-%d')
            except Exception:
                pass
        
        elements.append(
            InteractionBuilder.create_datepicker(
                action_id=f"{action_id_base}_0",
                placeholder=option_names[0],
                initial_date=initial_date
            )
        )
        
    elif action_type == 'static_select':
        # Create dropdown with options
        options = [(name, value) for name, value in zip(option_names, option_values)]
        elements.append(
            InteractionBuilder.create_static_select(
                action_id=f"{action_id_base}_0",
                placeholder="Select an option",
                options=options
            )
        )
        
    elif action_type == 'multi_static_select':
        # Create multi-select dropdown
        options = [(name, value) for name, value in zip(option_names, option_values)]
        elements.append(
            InteractionBuilder.create_multi_select(
                action_id=f"{action_id_base}_0",
                placeholder="Select options",
                options=options
            )
        )
        
    elif action_type == 'users_select':
        # Create user select
        elements.append(
            InteractionBuilder.create_users_select(
                action_id=f"{action_id_base}_0",
                placeholder=option_names[0] if option_names else "Select a user"
            )
        )
        
    elif action_type == 'channels_select':
        # Create channel select
        elements.append(
            InteractionBuilder.create_channels_select(
                action_id=f"{action_id_base}_0",
                placeholder=option_names[0] if option_names else "Select a channel"
            )
        )
        
    else:
        # Default to buttons
        for i, (name, value) in enumerate(zip(option_names, option_values)):
            elements.append(
                InteractionBuilder.create_button(
                    text=str(name),
                    action_id=f"{action_id_base}_{i}",
                    value=str(value),
                    style="primary" if i == 0 else None
                )
            )
    
    return elements
